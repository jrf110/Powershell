#!/bin/ksh

software="apache httpd"
executables=("httpd" "httpd.worker" "httpd.event" "apachectl")
excludeDirs=("temp" "nas" "share")
configFilePatterns=("wserver.conf_*" "another_pattern")

# 查找安装路径
find_installation_paths() {
    found_paths=()
    for executable in "${executables[@]}"; do
        while IFS= read -r -d '' file; do
            found_paths+=("$(dirname "$file")")
        done < <(find / -type f -name "$executable" -print0 2>/dev/null)
    done
    echo "${found_paths[@]}" | sort -u
}
find_installation_paths() {
    found_paths=()
    for executable in "${executables[@]}"; do
        while IFS= read -r -d '' file; do
            dir=$(dirname "$file")
            # 过滤临时文件夹
            if [[ $dir != *"/temp"* ]]; then
                found_paths+=("$dir")
            fi
        done < <(find / -type f -name "$executable" -print0 2>/dev/null)
    done
    # 去除重复路径并确认实际存在可执行文件
    unique_paths=($(printf "%s\n" "${found_paths[@]}" | sort -u))
    actual_paths=()
    for path in "${unique_paths[@]}"; do
        for executable in "${executables[@]}"; do
            if [ -f "$path/$executable" ]; then
                actual_paths+=("$path")
                break
            fi
        done
    done
    echo "${actual_paths[@]}"
}




# 获取软件版本信息
get_version_info() {
    version_command=$1
    version=$($version_command -V 2>/dev/null | grep "Server version:" | awk -F'/' '{print $2}')
    if [ -z "$version" ]; then
        echo "无法获取版本信息"
    else
        echo "$version"
    fi
}

# 获取补丁信息
get_patch_info() {
    patch_command=$1
    patch_info=$($patch_command -t 2>&1 | grep 'CVE-.\{4,20\}')
    if [ -z "$patch_info" ]; then
        echo "未找到补丁信息"
    else
        echo "$patch_info"
    fi
}

# 检查实例是否在运行
check_instance_running() {
    instance=$1
    pid=$(pgrep -f "$instance")
    if [ -z "$pid" ]; then
        echo "未运行"
    else
        echo "正在运行"
    fi
}

# 查找配置文件
find_config_files() {
    dir=$1
    patterns=$2
    config_files=()
    for pattern in "${patterns[@]}"; do
        while IFS= read -r -d '' file; do
            config_files+=("$file")
        done < <(find "$dir" -type f -name "$pattern" -print0 2>/dev/null)
    done
    echo "${config_files[@]}"
}

# Main函数
main() {
    echo "正在查找 $software 的安装信息..."
    paths=$(find_installation_paths)

    for path in $paths; do
        echo "=== 安装路径：$path ==="
        for executable in "${executables[@]}"; do
            if [ -f "$path/$executable" ]; then
                version=$(get_version_info "$path/$executable")
                patch_info=$(get_patch_info "$path/$executable")
                config_files=$(find_config_files "$path" "${configFilePatterns[@]}")
                for config_file in $config_files; do
                    instance_name=$(basename "$(dirname "$config_file")")
                    is_running=$(check_instance_running "$path/$executable")
                    echo "实例 - 名称：$instance_name"
                    echo "实例 - $executable 版本：$version"
                    echo "实例 - 补丁信息：$patch_info"
                    echo "实例 - 是否在运行：$is_running"
                    echo ""
                done
            fi
        done
    done
    echo "完成 $software 的安装信息查找。"
}



main




Self-Assessment - 2023

Over the course of 2023, as a software engineer, I actively contributed to the success of our middleware engineer team. Our team's focus was on handling daily Business as Usual (BAU) tasks, and we made significant progress in various areas. Here is an overview of our achievements:

1. Jira Items:
Throughout the year, our team took on a substantial number of Jira items and successfully resolved them within the specified timeframes. We prioritized tasks efficiently and ensured effective collaboration, resulting in the timely completion of a considerable number of Jira items.

2. User Requirements:
As a team, we prioritized understanding and fulfilling user requirements. We closely worked with stakeholders to determine their needs, analyze feasibility, and implement robust solutions. By proactively collaborating with project managers and product owners, we accomplished a significant number of user requirements, meeting or exceeding client expectations.

3. Bug Fixes:
In 2023, we dedicated ourselves to resolving bugs and improving the overall quality of our middleware systems. We adopted a diligent approach to bug identification, investigation, and resolution. Through rigorous testing and debugging, we successfully addressed a notable number of bugs, contributing to a more stable and reliable software environment.

4. Continuous Improvement:
Apart from handling BAU tasks, our team was committed to continuously improving our skills and processes. We actively participated in training sessions, workshops, and knowledge-sharing initiatives to enhance our technical expertise. By embracing new technologies, adopting best practices, and optimizing our workflows, we ensured that our team remained at the cutting edge of middleware engineering.

Overall, the past year was marked by significant achievements for our middleware engineer team. We consistently met deadlines, delivered high-quality solutions, and actively contributed to the success of the projects we undertook. I am proud of the team's accomplishments and look forward to building upon this success in the upcoming year.



# Fetch installed software information
$software = Get-WmiObject -Class Win32_Product | Select-Object Name, Vendor, Version, InstallLocation

# Initialize an array to hold software details
$softwareDetails = @()

# Loop through each installed software
foreach ($item in $software) {
    $softwareName = $item.Name
    $softwareVersion = $item.Version
    $installLocation = $item.InstallLocation
    
    # Get additional details using registry or other methods if needed
    # For instance, using registry to find patch information:
    $registryPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$softwareName"
    $patchDetails = (Get-ItemProperty -Path $registryPath).DisplayVersion

    # Check if software is running (by searching for a process)
    $isRunning = Get-Process | Where-Object {$_.Name -eq $softwareName}

    # Construct an object with software details
    $softwareInfo = [PSCustomObject]@{
        Name = $softwareName
        Version = $softwareVersion
        InstallLocation = $installLocation
        PatchDetails = $patchDetails
        IsRunning = if ($isRunning) { "Running" } else { "Not Running" }
        # Add more properties as needed
    }

    # Add the software details to the array
    $softwareDetails += $softwareInfo
}

# Output the software details in desired format (e.g., CSV)
$softwareDetails | Export-Csv -Path "InstalledSoftwareInfo.csv" -NoTypeInformation




# 查找所有磁盘上的 weblogic.jar 文件并获取详细信息
$drives = Get-PSDrive -PSProvider FileSystem | Where-Object { $_.Free -gt 0 } | Select-Object -ExpandProperty Name

foreach ($drive in $drives) {
    $searchPath = "${drive}:\"
    $weblogicJars = Get-ChildItem -Path $searchPath -Recurse -Include "weblogic.jar" -ErrorAction SilentlyContinue

    foreach ($jarFile in $weblogicJars) {
        $installLocation = $jarFile.DirectoryName
        $javaCmdOutput = ""

        # 读取版本信息和详细的 patch 信息
        if (Test-Path (Join-Path -Path $installLocation -ChildPath "weblogic.jar")) {
            $javaCmdOutput = Invoke-Expression "java -cp '$($installLocation)\weblogic.jar' weblogic.version verbose 2>&1"
        }

        # 构建输出字符串
        $output = "OWS0: Binary,product_alias,OWS
OWS0: Binary,product_home,$installLocation
$javaCmdOutput"

        Write-Output $output
    }
}






# 获取可用磁盘列表
$drives = Get-PSDrive -PSProvider FileSystem | Where-Object { $_.Free -gt 0 } | Select-Object -ExpandProperty Name

# 初始化一个数组以保存后台任务
$jobs = @()

# 遍历每个磁盘并创建后台任务来搜索 weblogic.jar 文件
foreach ($drive in $drives) {
    $searchPath = "${drive}:\"

    $job = Start-Job -ScriptBlock {
        param($path)
        
        # 搜索 weblogic.jar 文件
        Get-ChildItem -Path $path -Recurse -Include "weblogic.jar" -ErrorAction SilentlyContinue
    } -ArgumentList $searchPath

    # 将任务添加到任务列表
    $jobs += $job
}

# 等待所有后台任务完成
$null = $jobs | Wait-Job

# 获取所有任务的结果
$results = $jobs | Receive-Job

# 处理每个任务的结果
foreach ($result in $results) {
    foreach ($jarFile in $result) {
        $installLocation = $jarFile.DirectoryName
        $javaCmdOutput = ""

        # 读取版本信息和详细的 patch 信息
        if (Test-Path (Join-Path -Path $installLocation -ChildPath "weblogic.jar")) {
            $javaCmdOutput = Invoke-Expression "java -cp '$($installLocation)\weblogic.jar' weblogic.version verbose 2>&1"
        }

        # 构建输出字符串
        $output = "OWS0: Binary,product_alias,OWS
OWS0: Binary,product_home,$installLocation
$javaCmdOutput"

        Write-Output $output
    }
}
